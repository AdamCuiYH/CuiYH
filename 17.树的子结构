题目描述
输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）

思路
# -*- coding:utf-8 -*
class TreeNode:
    def __init__(self,x):
        self.val = x
        self.left = None
        self.right = None
class Solution:
    def HasSubtree(self,pRoot1,pRoot2):
        if not pRoot1 or not pRoot2:
            return False
        return self.IsSubTree(pRoot1,pRoot2) or self.HasSubtree(pRoot1.left,pRoot2) or self.HasSubtree(pRoot1.right,pRoot2)
    def IsSubTree(self,A,B):
        if not B:
            return True
        if not A:
            return False
        if A.val != B.val:
            return False
        return self.IsSubTree(A.left,B.left) and self.IsSubTree(A.right,B.right)
思路2
# -*- coding:utf-8 -*
class TreeNode:
    def __init__(self,x):
        self.val = x
        self.left = None
        self.right = None
class Solution:
    def HasSubtree(self,pRoot1,pRoot2):
        result = False
        if not pRoot1 and not pRoot2:
            if pRoot1.val == pRoot2.val:
                return self.IsSubTree(self,pRoot1,pRoot2)
            if not result:
                return self.HasSubtree(pRoot1.left,pRoot2)
            if not result:
                return self.HasSubtree(pRoot1.right,pRoot2)
    def IsSubTree(self,A,B):
        if not B:
            return True
        if not A:
            return False
        if A.val != B.val:
            return False
        return self.IsSubTree(pRoot1.left,pRoot2.left) and self.IsSubTree(pRoot1.right,pRoot2.right)
