题目描述：输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。
思路：
冒泡排序：复杂度较大
快速排序，太繁琐O(nlog(n))
利用最大堆实现，O(nlog(k))，，，需要的是前K小的数，首先注意边界情况，就是条件。
然后对前K个数字建堆，剩下的数字和堆顶比较，如果比堆顶大就替换掉堆顶元素，否则的话，移到下一个数字进行比较。
代码：
# -*- coding:utf-8 -*-
import heapq
class Solution:
    def GetLeastNumbers_Solution(self, tinput, k):
        # write code here
        if tinput==None or k<=0 or len(tinput) < k:
            return []
        res = []
        for i in tinput:
            if len(res) < k:
                heapq.heappush(res,-i)
            else:
                heapq.heappushpop(res,-i)
        return sorted(list(map(lambda x:-x,res)))


注意：如果要求最大的K个数，则使用最小堆，heapq默认是建立最小堆，因此建立最大堆的时候使用负号
