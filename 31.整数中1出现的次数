题目描述：
求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,
但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
思路：将整数中的高位，当前位和低位分别表示出来，然后根据当前位的情况分别得出1出现的次数：
当cur==0，count = 高位*位数
cur == 1,count= 高位*位数 + 低位 + 1
cur=2-9，count = （高位+1）*位数
代码：
# -*- coding:utf-8 -*-
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        # write code here
        count = 0
        i = 1
        high,cur,low = 0,0,0
        while (n/i!=0):
            high = n/(i*10)
            cur = (n/i)%10
            low = n-(n/i)*i
            if cur==0:
                count += high*i 
            elif cur==1:
                count += high*i + low +1
            else:
                count += (high+1)*i 
            i = i*10
        return count
