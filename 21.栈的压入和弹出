题目描述
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，
序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
思路：
借助一个辅助栈stack，对于序列1中的每个元素，每像stack中压入一个元素后，就和序列2中的元素比较，如果栈不为空且元素相等时，将stack弹出，然后序列2中的指针
向后移动一个元素，最后判断syack是不是为空，如果为空则返回true，否则返回false

代码：
class Solution:
	def IsPoporder(self,pushV,popV):
		if pushV == [] or len(pushV) != len(popV):
			return False
		stack = []
		index = 0
		for item in pushV:
			stack.append(item)
			while stack and stack[-1] == popV[index]:
				stack.pop()
				index += 1

		if stack == []:
			return True
		else:
			return False
