题目描述
输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。

思路1
利用递归
# -*- coding:utf-8 -*-
class ListNode:
    def __init__(self,x):
        self.val = x
        self.next = None
class Solution:
    def Merge(self,pHead1,pHead2):
        if not pHead1 and not pHead2:
            return None
        if not pHead1:
            return pHead2
        if not pHead2:
            return pHead1
        if pHead1.val < pHead2.val:
            pHead1.next = self.Merge(pHead1.next,pHead2)
            return pHead1
        else:
            pHead2.next = self.Merge(pHead1,pHead2.next)
            return pHead2
            
            
            
 思路2 非递归
 建立一个新链表，然后挨个比较pHead1和pHead2的结点。直到有一个链表遍历完为止，然后将没有遍历完的链表直接加在新链表后面，即可。
 class ListNode:
  def __init__(self,x):
    self.val = x
    self.next = None
    
class Solution:
  def Merge(self,pHead1,pHead2):
    if not pHead1 and not pHead2:
      return None
    if not pHead1:
     return pHead2
    if not pHead2:
     return pHead1
    newhead = ListNode(-1)
    temp = newhead
    p1,p2 = pHead1,pHead2
    while p1 and p2:
      if p1.val < p2.val:
        temp.next = ListNode(p1.val)
        temp = temp.next
        p1 = p1.next
      else:
        temp.next = ListNode(p2.val)
        temp = temp.next
        p2 = p2.next
       
     if p1:
      temp.next = p1
     if p2:
      temp.next = p2
     return newhead.next
